;;;;
;;;; George Ferguson, ferguson@cs.rochester.edu,  9 Feb 2004
;;;; Time-stamp: <Mon Feb 16 23:48:25 EST 2004 ferguson>
;;;;

(in-package :simplekb)

(defun test1 ()
  (clear-db)
  (<- (dog fido))
  (kb-prove '(dog fido)))

(defun test2 ()
  (clear-db)
  (<- (dog fido))
  (kb-prove '(dog ?x)))

(defun test3 ()
  (clear-db)
  (<- (mammal ?x) (dog ?x))
  (<- (mammal ?x) (cat ?x))
  (<- (likes ?x ?y) (dog ?x) (cat ?y))
  (<- (dog fido))
  (<- (cat sylvester))
  (loop for q in '((dog fido)
		   (dog ?x)
		   (mammal ?x)
		   (likes fido sylvester)
		   (likes sylvester fido)
		   (likes ?x ?y))
	do (format t "Query:   ~S~% Result: ~S~%~%" q (kb-prove q))))

(defun test4 ()
  (clear-db)
  (<- (dog fido))
  (<- (dog venus))
  (<- (dog snoopy))
  (format t "dogs: ~S~%~%" (kb-prove '(dog ?x)))
  (kb-retract '(dog fido))
  (format t "dogs: ~S~%~%" (kb-prove '(dog ?x)))
  (kb-retract '(dog ?x))
  (format t "dogs: ~S~%~%" (kb-prove '(dog ?x))))

(defun test5 ()
  (clear-db)
  (<- (dog fido))
  (<- (dog buster))
  (<- (dog sparky))
  (format t "nil: ~S~%~%" (kb-prove '(dog ?x)))
  (format t "1: ~S~%~%" (kb-prove '(dog ?x) :max-solutions 1))
  (format t "2: ~S~%~%" (kb-prove '(dog ?x) :max-solutions 2))
  (format t "3: ~S~%~%" (kb-prove '(dog ?x) :max-solutions 3))
  (format t "4: ~S~%~%" (kb-prove '(dog ?x) :max-solutions 4)))

(defun test6 ()
  (clear-db)
  (<- (dog fido))
  (format t "(dog fido): ~S~%~%" (kb-prove '(dog fido)))
  (format t "(not (dog fido)): ~S~%~%" (kb-prove '(not (dog fido)))))
  
(defun test7 ()
  (clear-db)
  (<- (dog ?x) (furry ?x) (not (whale ?x)) (barks ?x))
  (<- (furry fido))
  (<- (barks fido))
  (<- (furry willie))
  (<- (whale willie))
  (<- (barks willie))
  (kb-prove '(dog ?x)))
